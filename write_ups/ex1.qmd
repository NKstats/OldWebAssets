---
title: "Propensity Score Matching in Python"
author: "Solomon Eshun"
date: 2024-04-19
description: "A step-by-step approach to conducting propensity score matching in Python"
image: /imgs/whatif.png
categories: ["programming"]
bibliography: references.bib
output: 
  html_document:
    toc: true
    toc_float: true
    smart: false
    print_df: paged
---


under construction !!!







- exang (Exercise Induced Angina): This variable is binary (1 = yes, 0 = no) and indicates whether the patient experienced angina (chest pain) induced by exercise. It is a good candidate for a treatment variable because angina can be considered as an "event" or "condition" whose impact on other health outcomes can be assessed.

- num (Diagnosis of Heart Disease): This is the outcome variable and is already coded as 0 = no presence and 1-4 indicating different types of defects (often, any value > 0 is considered as presence of disease). This variable can be used to determine the effect of exercise-induced angina on the presence of heart disease.


```{python}

import pandas as pd

url = "https://archive.ics.uci.edu/ml/machine-learning-databases/heart-disease/processed.cleveland.data"
# Column names based on the dataset documentation
column_names = ['age', 'sex', 'cp', 'trestbps', 'chol', 'fbs', 'restecg',
                'thalach', 'exang', 'oldpeak', 'slope', 'ca', 'thal', 'num']

# Load the dataset
df = pd.read_csv(url, names=column_names)

import pandas as pd

# Assuming df is already loaded with the heart disease data
# Convert 'num' to binary: 0 indicates no heart disease, 1-4 are converted to 1 indicating presence of heart disease
df['num'] = (df['num'] > 0).astype(int)

# Verify the changes
print(df['num'].value_counts())


# Check the first few rows of the dataframe
print(df.shape)

import numpy as np

# Replace '?' with NaN
df.replace('?', np.nan, inplace=True)

# Option to drop rows with NaN
df.dropna(inplace=True)

print(df.shape)


df
```


```{python, echo = FALSE}

import researchpy as rp

# rp.summary_cat(df['num'])

import warnings
warnings.filterwarnings('ignore')


import matplotlib.pyplot as plt
import seaborn as sns

covariate = 'thalach'

data = df

pepe_calories = data[data['exang'] == 1][covariate]
modern_calories = data[data['exang'] == 0][covariate]
plt.figure(figsize=(8,4))
ax = sns.distplot(pepe_calories, fit_kws={"color":"'orange'"}, kde=True,#palette=["#3498db",'orange']
        hist=None, label="exang = 0", kde_kws={"linewidth": 2.5});
ax = sns.distplot(modern_calories, fit_kws={"color":"#3498db"}, kde=True,
        hist=None, label="exang = 1", kde_kws={"linewidth": 2.5});

plt.xlabel('Propensity Score')
plt.legend(fontsize=10)
plt.xticks(fontsize=10)
plt.yticks(fontsize=10)
plt.xlabel('Estimated Ps', fontsize=10, labelpad=10)
plt.ylabel(' ', fontsize=10, labelpad=10)
ax.spines['right'].set_visible(False)
ax.spines['top'].set_visible(False)
ax.spines['left'].set_visible(False)
plt.yticks([])
plt.title('Before Matching', fontsize=10)
plt.show()





```


```{python}
continuous_vars = ['age', 'trestbps', 'chol', 'thalach', 'oldpeak']

# Converting all other variables to 'category' data type except the ones in continuous_vars
for column in df.columns:
    if column not in continuous_vars:
        df[column] = df[column].astype('category')

```


```{python}

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

# Assuming df is your DataFrame after loading the data with the correct column names

# Setting the aesthetic style of the plots
# sns.set(style="whitegrid")

# Determine the number of subplots
n_vars = df.columns.size
n_cols = 2
n_rows = (n_vars + n_cols - 1) // n_cols  # This ensures enough rows to accommodate all plots

# Create a figure to hold the subplots
fig, axes = plt.subplots(n_rows, n_cols, figsize=(15, 5 * n_rows))
axes = axes.flatten()  # Flatten the axes array for easy iteration

# Iterate through the list of columns and create plots
for i, column in enumerate(df.columns):
    ax = axes[i]
    if df[column].dtype in ['int64', 'float64']:  # Adjust based on your specific data types
        sns.histplot(data=df, x=column, hue='exang', element='step', stat='density', common_norm=False, ax=ax)
        ax.set_title(f'Distribution of {column} by Exang')
        ax.set_xlabel(column)
        ax.set_ylabel('Density')
        ax.legend(title='Exang', labels=['No Angina (0)', 'With Angina (1)'])
    else:
        sns.countplot(x=column, hue='exang', data=df, ax=ax)
        ax.set_title(f'Count of {column} by Exang')
        ax.set_xlabel(column)
        ax.set_ylabel('Count')
        ax.legend(title='Exang', labels=['No Angina (0)', 'With Angina (1)'])

# Adjust layout to prevent overlap and ensure labels are readable
plt.tight_layout()
plt.show()


```

### Introduction


In statistical analysis, the challenge of comparing treatments in observational studies is significant due to the presence of confounding variables. Unlike randomized controlled trials (RCTs), observational studies do not randomly assign treatments, which can lead to biased estimates of treatment effects. This is where the idea of propensity score matching (PSM) becomes an invaluable tool.

Propensity score matching is a statistical technique that attempts to estimate the effect of a treatment or intervention by accounting for the covariates that predict receiving the treatment (or intervention). It was developed by @rosenbaum1983central to help reduce bias by matching units receiving the treatment with similar units that do not receive the treatment based on a calculated score known as the propensity score.

This score is the probability of treatment assignment conditional on observed baseline characteristics. This matching process helps to form a sample in which the distribution of observed baseline covariates is similar between treated and untreated groups, thereby mimicking a randomized experiment.

In this blog, I will dive into how to implement propensity score matching in R. I will cover the essential packages, step-by-step coding examples, and practical tips to ensure efficient analysis. Whether you're a researcher, statistician, or data enthusiast, understanding how to effectively conduct PSM in R can significantly enhance your analytical capabilities in dealing with observational data.

Let’s get started by exploring the basics of propensity score calculation and then move into how to perform matching using R’s comprehensive statistical packages. @stuartho

[@stuartho]

### Thesis

Causal inference is a vital aspect of medical research that helps to establish causal relationships between different variables. It is the process of making claims about cause-and-effect relationships in a given system or phenomenon. It is an essential component of scientific research, particularly in fields such as medicine, economics, and social sciences, where experiments that manipulate variables are often not feasible or ethical. In these cases, researchers often rely on comparative experimental studies.


Observational studies become important in fields such as medicine, economics, and social sciences where it may not be feasible or ethical to conduct experiments that manipulate variables. However, making causal inferences in observational studies can be challenging due to limitations such as random selection of subjects but not random allocation of treatments to subjects. This makes it difficult to determine whether the difference in outcome between treated and untreated subjects is due to the treatment or differences in other characteristics of the subjects.

Another limitation is self-selection, where individuals opt for a particular treatment for specific reasons, making it difficult to compare them directly with those who did not receive the treatment.

There is an increasing interest in estimating the causal effects of treatment using observational or nonrandomized data. In observational studies, the baseline characteristics of treated or exposed subjects often differ systematically from those of untreated or unexposed subjects. Essential to the production of high-quality evidence to inform decision-making is the ability to minimize the effect of confounding. An increasingly frequent approach to minimizing bias when estimating causal treatment effects is based on the propensity score (the likelihood of receiving treatment based on some outlines subject characteristics) usually obtained using a logit model @rosenbaum1983central.

Propensity score matching have gained much relevance across disciplines to estimate causal effects using observational data. This technique attempt to replicate the ideal of randomized experiments as closely as possible. It a quasi-experimental method that aims to search for counterfactual unit that is comparable with the treated unit among many untreated units.
